// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.5.0 hacker-room-new.glb -T
// Files: hacker-room-new.glb [34.62MB] > /Users/hsuwinlat/Desktop/jsm pj/threejscc-portfolio/public/models/hacker-room-new-transformed.glb [2.56MB] (93%)
// */

// import { useGLTF, useTexture } from "@react-three/drei";

// export function HackerRoom(props) {
//   const { nodes, materials } = useGLTF("/models/hacker-room.glb");

//   const monitortxt = useTexture("textures/desk/monitor.png");
//   const screenTxt = useTexture("textures/desk/screen.png");

//   return (
//     <group {...props} dispose={null}>
//       <mesh
//         geometry={nodes.screen_screens_0.geometry}
//         material={materials.screens}
//       >
//         <meshMatcapMaterial map={screenTxt} />
//       </mesh>
//       <mesh
//         geometry={nodes.screen_glass_glass_0.geometry}
//         material={materials.glass}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_1.geometry}
//         material={materials.table_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_2.geometry}
//         material={materials.computer_mat}
//       >
//         <meshMatcapMaterial map={monitortxt} />
//       </mesh>
//       <mesh
//         geometry={nodes.table_table_mat_0_3.geometry}
//         material={materials.server_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_4.geometry}
//         material={materials.vhsPlayer_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_5.geometry}
//         material={materials.stand_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_6.geometry}
//         material={materials.mat_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_7.geometry}
//         material={materials.arm_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_8.geometry}
//         material={materials.tv_mat}
//       >
//         <meshMatcapMaterial map={monitortxt} />
//       </mesh>
//       <mesh
//         geometry={nodes.table_table_mat_0_9.geometry}
//         material={materials.cables_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_10.geometry}
//         material={materials.props_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_11.geometry}
//         material={materials.ground_mat}
//       />
//       <mesh
//         geometry={nodes.table_table_mat_0_12.geometry}
//         material={materials.key_mat}
//       />
//     </group>
//   );
// }

// useGLTF.preload("/models/hacker-room.glb");
// import { useGLTF, useTexture } from '@react-three/drei';
// import { useState, useEffect } from 'react';
// import CanvasLoader from './CanvasLoader';
// // Importing CanvasLoader

// export function HackerRoom(props) {
//   const { nodes, materials } = useGLTF('/models/hacker-room.glb');

//   const monitortxt = useTexture('textures/desk/monitor.png');
//   const screenTxt = useTexture('textures/desk/screen.png');

//   const [loading, setLoading] = useState(true);

//   useEffect(() => {
//     // Once textures are loaded, set loading to false
//     if (monitortxt && screenTxt) {
//       setLoading(false);
//     }
//   }, [monitortxt, screenTxt]);

//   // Render loading screen if still loading
//   if (loading) {
//     return <CanvasLoader />;
//   }

//   return (
//     <group {...props} dispose={null}>
//       <mesh geometry={nodes.screen_screens_0.geometry} material={materials.screens}>
//         <meshMatcapMaterial map={screenTxt} />
//       </mesh>
//       <mesh geometry={nodes.screen_glass_glass_0.geometry} material={materials.glass} />
//       <mesh geometry={nodes.table_table_mat_0_1.geometry} material={materials.table_mat} />
//       <mesh geometry={nodes.table_table_mat_0_2.geometry} material={materials.computer_mat}>
//         <meshMatcapMaterial map={monitortxt} />
//       </mesh>
//       <mesh geometry={nodes.table_table_mat_0_3.geometry} material={materials.server_mat} />
//       <mesh geometry={nodes.table_table_mat_0_4.geometry} material={materials.vhsPlayer_mat} />
//       <mesh geometry={nodes.table_table_mat_0_5.geometry} material={materials.stand_mat} />
//       <mesh geometry={nodes.table_table_mat_0_6.geometry} material={materials.mat_mat} />
//       <mesh geometry={nodes.table_table_mat_0_7.geometry} material={materials.arm_mat} />
//       <mesh geometry={nodes.table_table_mat_0_8.geometry} material={materials.tv_mat}>
//         <meshMatcapMaterial map={monitortxt} />
//       </mesh>
//       <mesh geometry={nodes.table_table_mat_0_9.geometry} material={materials.cables_mat} />
//       <mesh geometry={nodes.table_table_mat_0_10.geometry} material={materials.props_mat} />
//       <mesh geometry={nodes.table_table_mat_0_11.geometry} material={materials.ground_mat} />
//       <mesh geometry={nodes.table_table_mat_0_12.geometry} material={materials.key_mat} />
//     </group>
//   );
// }

// useGLTF.preload('/models/hacker-room.glb');
import { useGLTF, useTexture } from '@react-three/drei';
import { useState, useEffect } from 'react';
import CanvasLoader from './CanvasLoader'; // Ensure the path is correct for CanvasLoader

export function HackerRoom(props) {
  const [model, setModel] = useState(null); // Manage your 3D model state
  const { nodes, materials } = useGLTF('./hacker_room/scene.gltf'); // Assuming you are loading a glTF model

  useEffect(() => {
    // Example: Set model when it's fully loaded
    if (nodes && nodes.someNode) {
      // Check if the node exists
      setModel(nodes.someNode);
    }
  }, [nodes]); // Trigger effect when `nodes` changes

  if (!model) {
    return <CanvasLoader />; // Show loader until the model is available
  }

  // Safely check if geometry is available
  if (model && model.geometry) {
    return (
      <mesh geometry={model.geometry} material={materials.someMaterial}>
        {/* Add your mesh rendering logic */}
      </mesh>
    );
  } else {
    // Fallback if model or geometry isn't available
    return null;
  }
}
